<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Read property files -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:responder.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>

	<!-- Metadata -->	
	<bean id="metadataManager" class="com.temenos.interaction.odataext.resource.ResourceMetadataManager">
        <constructor-arg ref="stateMachine" />
	</bean>
	<bean id="edmMetadata" factory-bean="metadataManager" factory-method="getMetadata"/>
	<bean id="modelName" factory-bean="edmMetadata" factory-method="getModelName"/>

	<!-- Odata4j Metadata -->
	<bean id="metadataOData4j" class="com.temenos.interaction.odataext.entity.MetadataOData4j">
        <constructor-arg ref="edmMetadata" />
        <constructor-arg ref="stateMachine" />
    </bean>
	
	<!-- Import Resource manager context -->
	<import resource="classpath:/META-INF/resourcemanager-context.xml" />
	
	<!-- An extension of org.apache.wink.spring.Registrar with support for singletons -->
	<bean class="com.temenos.interaction.winkext.RegistrarWithSingletons">
		<property name="singletons">
			<list>
				<ref local="atomProvider" />
				<ref local="edmxProvider" />
				<ref local="serviceDocumentProvider" />
				<ref local="errorProvider" />
				<ref local="xhtmlProvider" />
 			</list>
   		</property>
        <property name="serviceRoots">
            <list>
                <ref local="ServiceRoot" />
                <ref local="Metadata" />
            </list>
        </property>
	</bean>

	<bean id="entityTransformer" class="com.temenos.interaction.core.hypermedia.StrategyBasedTransformer">
		<constructor-arg>
			<list>
				<bean class="com.temenos.interaction.core.hypermedia.EntityTransformer" />
				<bean class="com.temenos.interaction.commands.odata.OEntityTransformer" />
				<bean class="com.temenos.interaction.core.hypermedia.BeanTransformer" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="atomProvider" class="com.temenos.interaction.media.odata.xml.atom.AtomXMLProvider">
		<constructor-arg name="metadataOData4j" ref="metadataOData4j" />
		<constructor-arg name="metadata" ref="edmMetadata" />
        <constructor-arg name="hypermediaEngine" ref="stateMachine" />
		<constructor-arg ref="entityTransformer" />
	</bean>
    <bean id="edmxProvider" class="com.temenos.interaction.media.odata.xml.edmx.EdmxMetaDataProvider" />
	<bean id="serviceDocumentProvider" class="com.temenos.interaction.media.odata.xml.atomsvc.ServiceDocumentProvider">
        <constructor-arg name="hypermediaEngine" ref="stateMachine" />
	</bean>
    <bean id="errorProvider" class="com.temenos.interaction.media.odata.xml.error.ErrorProvider" />
 	<bean id="xhtmlProvider" class="com.temenos.interaction.media.xhtml.XHTMLProvider">
		<constructor-arg ref="edmMetadata" />
	</bean>

	<!-- Behaviour -->
	<bean id="behaviour" class="$behaviourClass" />
	<bean id="interaction" factory-bean="behaviour" factory-method="getRIM" />
    <bean id="exception" factory-bean="behaviour" factory-method="getExceptionResource" />
	<bean id="stateMachine" class="com.temenos.interaction.core.hypermedia.ResourceStateMachine">
		<constructor-arg ref="interaction" />
    	<constructor-arg ref="exception" />
		<constructor-arg ref="entityTransformer" />
	</bean>

	<!-- Resources -->
	<bean id="ServiceRoot" class="com.temenos.interaction.core.rim.HTTPHypermediaRIM">
		<constructor-arg ref="commands" />
		<constructor-arg ref="stateMachine" />
        <constructor-arg ref="edmMetadata" />
	</bean>

    <!-- Define the $metadata resource for OData (note, this is out of band meaning there are no links to the metadata from our service -->
    <bean id="Metadata" class="com.temenos.interaction.core.rim.HTTPHypermediaRIM">
        <constructor-arg ref="commands" />
        <constructor-arg>
            <bean class="com.temenos.interaction.core.hypermedia.ResourceStateMachine">
                <constructor-arg>
                    <bean class="com.temenos.interaction.core.hypermedia.ResourceState">
                        <constructor-arg name="entityName" value="Metadata" />
                        <constructor-arg name="name" value="initial" />
                        <constructor-arg>
                            <list>
                                <bean class="com.temenos.interaction.core.hypermedia.Action">
                                    <constructor-arg value="GETMetadata" />
                                    <constructor-arg value="VIEW" />
                                </bean>
                            </list>
                        </constructor-arg>
                        <constructor-arg name="path" value="/$metadata" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg ref="edmMetadata" />
    </bean>

	<!-- Start custom XML -->
#foreach ( $xmlContent in $commands.getXmlContents() )	
	$xmlContent
#end
	<!-- End custom XML -->
	
	<!-- Commands -->
#foreach ( $command in $commands.getCommands() )
	<bean id="$command.getId()" class="$command.getClassName()">
#foreach ( $parameter in $command.getParameters() )
#if ($parameter.isByReference() == "true")
		<constructor-arg ref="$parameter.getValue()" />
#else
		<constructor-arg value="$parameter.getValue()" />
#end
#end
	</bean>
	
#end
	
	<!-- Command controller -->
	<bean id="commands" class="com.temenos.interaction.core.command.NewCommandController">
		<constructor-arg name="commands">
			<util:map id="commandsMap" map-class="java.util.Hashtable">
#foreach ( $command in $commands.getCommands() )
				<entry key="$command.getId()" value-ref="$command.getId()" />
#end
			</util:map> 
		</constructor-arg>
	</bean>
	
</beans>
