This is a simple step by step example of creating a mock responder with the IRIS SDK.

1.  Change to a directory where you want to create your Mock Responder project.


2.  Create your mock responder project.  To do this you'll need Maven and a Java 1.6 SDK installed.

$ mvn archetype:generate -DgroupId=com.mycompany.useragentdev -DartifactId=mockresponder -DarchetypeGroupId=com.temenos.interaction -DarchetypeArtifactId=interaction-sdk-archetype -DarchetypeVersion=0.5.0-SNAPSHOT -DinteractiveMode=false

	NOTE - When creating your responder project we use the 'groupId' and 'artifaceId' to form part of the package names in the generated configuration files and source.


3.  Edit the sample EDMX file at src/main/resources/edmx.xml.
	- Visual studio 2010 comes with a graphical EDMX editor
	- alternatively edit the xml file directly
	- NB we are aiming to build an Eclipse EDMX editor


4.  Generate your JPA responder from the EDMX file at src/main/resources/edmx.xml.

$ cd mockresponder
$ mvn interaction-sdk:gen


5.  Run this IRIS SDK responder in jetty.

$ mvn jetty:run


6.  You can now view your resources in the Jetty admin screens.  

http://localhost:8080/responder/admin
	NB - For the time being, consider this our service document.  Wink generates these admin views including an xml view which is essentially a
	partial Web Application Description Language (or WADL) in the near future we will have:
	- an OData service document http://localhost:8080/responder/MockResponder.svc
	- a WADL service document http://localhost:8080/responder/MockResponder.wadl


7.  To do something meaningful with your application you will more than likely need to mock some data.  You can
	achieve this by pusing data into the Mock Responder's database.  Just edit the file at {mockresponder}/src/main/resources/META-INF/responder_insert.sql
	
	If you haven't changed the mockresponder example you should be able to uncomment the following line:

INSERT INTO `Flight`(`takeoffTime`) VALUES('1996-08-20 00:00:00');	

	Then restart you Jetty server (just press ctrl+c) followed by:

$ mvn jetty:run
	
	You can now browse your Flights at:

http://localhost:8080/responder/rest/Flight/1
	NB - it would be a really good idea to use 'curl' or RestClient to give you full control over the http request headers.  A web browser will
	typically include application/xml in the acceptable media types (Accept header), but we only bind a Provider to application/hal+xml and leave
	the default JAXB Provider in place for application/xml.